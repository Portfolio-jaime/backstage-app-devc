app:
  title: Backstage DevOps Course - BA Training
  baseUrl: http://localhost:3001
  support:
    url: https://github.com/jaime-henao/backstage-course
    items:
      - title: Course Documentation
        icon: docs
        links:
          - url: http://localhost:3001/docs/default/system/course/
            title: Course Overview
      - title: Troubleshooting
        icon: alert
        links:
          - url: http://localhost:3001/docs/default/system/troubleshooting/
            title: Common Issues

organization:
  name: British Airways - DevOps Training

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    keys:
      - secret: ${BACKEND_SECRET}
  baseUrl: ${BACKEND_BASE_URL:-http://localhost:7008}
  listen:
    port: ${BACKEND_PORT:-7008}
    host: ${BACKEND_HOST:-0.0.0.0} # Bind to all interfaces for Kubernetes
  # Health check endpoint
  healthCheck:
    path: /healthcheck
  # Readiness and liveness probes
  reading:
    path: /ready
  # CSP configuration for production
  csp:
    connect-src: ["'self'", 'http:', 'https:', '*.ba.com', '*.amazonaws.com']
    img-src: ["'self'", 'data:', 'https:', '*.gravatar.com', '*.githubusercontent.com']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${FRONTEND_BASE_URL:-http://localhost:3001}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # Request timeout and body limits for production
  request:
    timeout: 30000
    bodyParser:
      limit: '10mb'
  # Production database configuration with PostgreSQL
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
      # SSL configuration for production (disable for local development)
      ssl: ${POSTGRES_SSL_ENABLED:-false}
    # Connection pool settings for Kubernetes
    pool:
      min: ${POSTGRES_POOL_MIN:-2}
      max: ${POSTGRES_POOL_MAX:-20}
      acquireTimeoutMillis: 60000
      createTimeoutMillis: 30000
      destroyTimeoutMillis: 5000
      idleTimeoutMillis: 30000
      reapIntervalMillis: 1000
      createRetryIntervalMillis: 200
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # Personal Access Token for GitHub API access
      # Required scopes: repo, read:org, read:user, user:email
      token: ${GITHUB_TOKEN}
    ### GitHub Enterprise Server (if needed for BA internal repos)
    # - host: github.ba.com
    #   apiBaseUrl: https://github.ba.com/api/v3
    #   token: ${GHE_TOKEN}


# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Production-ready TechDocs configuration with external storage
techdocs:
  builder: ${TECHDOCS_BUILDER:-external} # Use 'external' for production (CI/CD builds)
  generator:
    runIn: ${TECHDOCS_GENERATOR_RUN_IN:-docker} # 'docker' for production
    dockerImage: ${TECHDOCS_DOCKER_IMAGE:-mkdocs/mkdocs-material:latest}
    pullImage: true
  publisher:
    type: ${TECHDOCS_PUBLISHER_TYPE:-awsS3} # 'awsS3' for production
    # AWS S3 configuration
    awsS3:
      bucketName: ${TECHDOCS_S3_BUCKET_NAME}
      region: ${AWS_REGION:-eu-west-1}
      accountId: ${AWS_ACCOUNT_ID}
      # Use AWS IAM roles in Kubernetes (recommended)
      # credentials:
      #   accessKeyId: ${AWS_ACCESS_KEY_ID}
      #   secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
    # Alternative: Google Cloud Storage
    # googleGcs:
    #   bucketName: ${TECHDOCS_GCS_BUCKET_NAME}
    #   projectId: ${GCP_PROJECT_ID}
  cache:
    ttl: 300000 # 5 minutes cache
    readTimeout: 5000

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    # GitHub OAuth provider for course - ONLY authentication method
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityName
            - resolver: emailLocalPartMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template, User, Group, Domain]
  
  # GitHub entity providers for automatic discovery
  providers:
    github:
      # Course repositories provider
      courseProvider:
        organization: 'Portfolio-jaime'  # Your GitHub organization
        catalogPath: '/catalog-info.yaml'
        filters:
          branch: 'main'
          repository: '.*'  # Scan all repositories
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 3 }
          initialDelay: { seconds: 15 }
      
      # General repositories provider (disabled by default)
      # allReposProvider:
      #   organization: 'your-org'
      #   catalogPath: '/catalog-info.yaml'
      #   filters:
      #     branch: 'main'
      #     repository: '.*'
      #   schedule:
      #     frequency: { hours: 1 }
      #     timeout: { minutes: 5 }
    
    # Microsoft Graph provider (for BA Office 365 integration)
    # microsoftGraphOrg:
    #   target: https://graph.microsoft.com/v1.0
    #   tenantId: ${AZURE_TENANT_ID}
    #   clientId: ${AZURE_CLIENT_ID}
    #   clientSecret: ${AZURE_CLIENT_SECRET}
    #   userFilter: accountEnabled eq true
    #   groupFilter: securityEnabled eq false
    #   schedule:
    #     frequency: { hours: 1 }
    #     timeout: { minutes: 3 }

  locations:
    # Course-specific entities
    - type: file
      target: ../../examples/entities.yaml

    # Course software templates
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Course organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    # Course system architecture
    - type: file
      target: ../../catalog/entities/systems.yaml
      rules:
        - allow: [System, Domain]

    # External example data (for learning)
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml
      rules:
        - allow: [Component, API, Resource]

    # Backstage community templates
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
      rules:
        - allow: [Template]

    # Your custom software templates - All templates from Portfolio-jaime repo
    - type: url
      target: https://github.com/Portfolio-jaime/backstage-software-templates/blob/main/templates/*/template.yaml
      rules:
        - allow: [Template]

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        # Production cluster configuration
        - url: ${K8S_CLUSTER_URL}
          name: ${K8S_CLUSTER_NAME:-production}
          authProvider: ${K8S_AUTH_PROVIDER:-serviceAccount} # or 'aws', 'oidc', 'google'
          # Service Account Token (recommended for production)
          serviceAccountToken: ${K8S_SERVICE_ACCOUNT_TOKEN}
          # Alternative: OIDC configuration
          # oidcTokenProvider: ${K8S_OIDC_TOKEN_PROVIDER}
          # AWS EKS configuration
          # awsAssumeRole: ${K8S_AWS_ASSUME_ROLE}
          dashboardUrl: ${K8S_DASHBOARD_URL}
          dashboardApp: ${K8S_DASHBOARD_APP:-kubernetes-dashboard}
          # Skip TLS verification for internal clusters (not recommended for production)
          skipTLSVerify: ${K8S_SKIP_TLS_VERIFY:-false}
          # Custom CA certificate
          caFile: ${K8S_CA_FILE}
        # Development/Staging cluster (optional)
        - url: ${K8S_DEV_CLUSTER_URL}
          name: development
          authProvider: serviceAccount
          serviceAccountToken: ${K8S_DEV_SERVICE_ACCOUNT_TOKEN}
          skipTLSVerify: true

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

# Dashboard configuration from external repository
dashboard:
  configSource:
    type: github
    repository: Portfolio-jaime/backstage-dashboard-templates
    path: templates/ba-devops-dashboard/config.yaml
    branch: main
    # Refresh configuration from repository every 5 minutes
    refreshInterval: 300000

# Cost Insights plugin configuration
costInsights:
  engineerCost: 200000 # Annual engineer cost in USD
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudStorage:
      name: Cloud Storage
      icon: storage
    cloudSQL:
      name: Cloud SQL
      icon: database
    loadBalancer:
      name: Load Balancer
      icon: network
  metrics:
    - kind: DAU
      name: Daily Active Users
      default: false
    - kind: cost
      name: Cost
      default: true

# Proxy for GitHub raw content (to avoid CORS issues)
proxy:
  endpoints:
    '/api/dashboard-config':
      target: 'https://raw.githubusercontent.com/Portfolio-jaime/backstage-dashboard-templates/main/templates/ba-devops-dashboard'
      changeOrigin: true
      pathRewrite:
        '^/api/dashboard-config': ''
